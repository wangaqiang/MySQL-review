一.MySQL数据类型介绍
	MySQL支持多种数据类型，主要有数值类型、日期/时间类型和字符串类型。
	1.数值数据类型包括整数类型TINYINT、SMALLINT、MEDIUMINT、INT、BIGIINT，浮点小数数据类型FLOAT和DOUBLE，定点小数类型DECIMAL。
	2.日期/时间类型：包括YEAR、TIME、DATE、DATETIME和TIMESTAMP。
	3.字符串类型：包括CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET等字符串类型又分为文本字符串和二进制字符串。

二.数据类型
	1.整数类型
	MySQL主要提供的整数类型有TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT。整数类型的字段可以添加AUTO_INCREMENT自增约束条件。
	存储需求：分别为1，2，3，4，8个字节，所以TINYINT（8bits）无符号最大值为2**8-1,有符号最大值为2**7-1。
	create table id int(10)这个数字10表示的是该数据类型指定的显示宽度，数值的位数小于指定的宽度时会由空格填充。如果插入的大于显示宽度的值，只要该值不超过该类星整数的取值范围，数值依然可以插入，而且能够显示出来。

	2.浮点数和定点数类型
	MySQL中使用浮点数和定点数来表示小数。浮点类型有两种：单精度浮点类型（FLOAT）和双精度浮点类型（DOUBLE）。定点类型只有一种：DECIMAL。都可以用（m，n）来表示，m为精度，表示总共的位数，n为标度，是表示小数的位数。
	存储需求：4,8,m+2个字节
	有指定了（m，n）的情况
		只要用户插入的数字超过范围，就会四舍五入进行处理。
		一旦插入的数的小数点前的数字个数大于m，则插入规定范围里最大的数字。
	没有指定（m，n）的情况
		浮点类型默认采用实际的精度，定点类型默认（10,0）处理

	浮点数相对于定点数优点是长度一定的情况下能够表示更大的数据范围，缺点是会引起精度问题。
	在MySQL中，定点数以字符串形式存储，在对精度要求比较高的时候使用DECIMAL比较好。两个浮点数进行减法和比较运算时也容易出问题，尽量避免做浮点数比较。

	3.日期与时间类型
	有多种表示日期的数据类型，主要有DATETIME，DATE，TIMESTAMP，TIME和YEAR。当指定不合法的值时系统将‘零’值插入到数据库中。
	类型名称     日期格式           日期范围                     存储需求
	YEAR         YYYY			    1901-2155				       1字节
	TIME         HH:MM:SS       -838:59:59~838:59:59		       3字节
	DATE         YYYY-MM-DD     1001-01-01~9999-12-3			   3字节
	DATETIME     将DATE 和TIME综合即可							   8字节
	TIMESTAMP	 与DATETIME格式一样     1970-01-01 UTC			   4字节

	YEAR：以4位字符串或者数字格式‘2019’或2019均可插入。
		以两位字符串插入的范围为‘00’-‘99’，‘00’-‘69’：‘2000’-‘2069’，‘70’-‘99’：‘1970-1999’，‘0’和‘00’代表0,插入超过范围的值将被转换为2000。
		以两位数字表示的：1-69：2001-2069,70-99：1970-1999，0被转换为0000
		非法YEAR值被转换为0000

	TIME：TIME时间取值范围大于24小时的原因是可能是某个事件过去的时间或者两个事件之间的时间间隔
	可以插入‘D HH:MM:SS’,'HH:MM:SS','D HH:MM','D HH','SS',这里的D表示的是天数，取值为0-34,在查如成功后，D被转换为D×24+HH
	可以‘GGMMSS’或者HHMMSS的有效时间。
	注意：没冒号：‘1122’，则认为是00:11:22即从右向左,有冒号时从左向右。
		使用‘D HH’这种格式插入时，小时一定要用双位数值，如果是小于10，在前面补0
		插入系统当前时间：CURRENT_TIME() 或者now()

	DATE：以‘YYYY-MM-DD’或者‘YYYYMMDD’
		以‘YY-MM-DD’或者‘YYMMDD’，‘00-69’：‘2000-2069’，‘70-99’：‘1970-1999’
		以YY-MM-DD或者YYMMDD数字格式表示的日期，与上面相似。
		使用CURRENT_DATE()或者now(),插入当前系统日期,now返回的是日期和时间，而current根据后面写的是日期还是时间返回具体的东西。
		允许不严格语法：任何标点符号都可以作为日期部分之间的间隔符。

	DATETIME：综合DATE和TIME即可。

	TIMESTAMP：显示宽度固定在19个字符，除了和DATETIME存储字节和范围不同外，DATETIME存储啥就是啥，而TIMESTAMP存储的UTC（世界标准时间），存储时对当前时区进行转换，检索时再转换回当前时区

	4.文本字符串类型
	支持文本字符串和二进制字符串。
	文本字符串主要有CHAR，VARCHAR，TEXT，ENUM和SET
	CHAR和VARCHAR：CHAR(M)为固定长度字符串，保存时在右侧填充空格以达到指定的长度，M的范围是0-255。
	VARCHAR(M)是长度可变的字符串，M的范围是0-65535，VARCHAR的最大实际长度有最长的行的大小和使用的字符集决定。实际占用空间为字符串实际长度加1.

	TEXT：保存非二进制字符串，分为TINYTEXT，TEXT，MEDIUMTEXT和LONGTEXT
		分别大小为2××8-1,2××16-1,2××24-1,2××32-1

	ENUM：ENUM是一个字符串对象
	字段名 ENUM('值1'，‘值2’...)
	null null  '' 0  列表值从1开始，最大为65535个元素，ENUM总有一个默认值，如果ENUM列为NOT NULL，默认值为第一个元素，否则默认值NULL。是因为NULL排在所有元素最前面，下来才是无效值空字符串对应的0，才下来是列表值。

	SET：SET是一个字符串对象，可以有零个或者多个值，SET列最多可以有64个成员
	SET ('值1','值2'...)
	与ENUM相同，内部用整数表示，当创建表时，SET成员值的尾部空格自动被删除。
	与ENUM不同的是，SET可以选择多个值的组合，而ENUM只能选择一个值。
	如果插入的值是重复的，只取一个，插入不按顺序排列值，则自动按顺序插入

	5.二进制字符串类型
	主要有BIT，BINARY，VARBINARY，TINYBLOB，BLOB，MEDIUMBLOB，LONGBLOB
	BIT(M)：是位字段类型，M表示每个值的位数，范围为1-64,如果被省略，默认为1。
	如果分配的值的长度小于M位，在值的左边用0填充
	BIN()函数将数字转换为二进制。

	BINARY和VARBINARY：类似于CHAR和VARCHAR。
	BINARY长度是固定的，不足长度的在右边填充‘\0’，VARBINARY长度可变

	BLOB：是一个二进制的对象，存储范围类似与TEXT

三.如何选择数据类型
	1.整数和浮点数类型：要求精度高时，选择DOUBLE类型。
	2.浮点数和定点数：精度要求较高或者两个浮点数进行减法和比较运算时，使用DECIMAL
	3.日期和时间类型：如果同时记录如期和时间时，使用TIMESTMAP或者DATETIME，存储范围较大的时候使用DATETIME。
	4.CHAR与VARCHAR：CHAR的速度和效率快，缺点是浪费空间。
	对于MyISAM存储引擎：最好使用固定长度的数据列代替可变长度的数据列，这样可以使整个表静态化，从而使数据检索较快，用空间换时间
	对于InnoDB存储引擎：使用可变长度的数据列，因为InnoDB不分固定长度和可变长度，因此使用CHAR不一定比使用VARCHAR更好，但VARCHAR比较节省空间。
	5.ENUM和SET：存储一个值用ENUM。存储多个值如一个人的兴趣爱好时用SET比较好。它两的值是字符串形式，但是在MySQL内部是以数值的形式存在的。
	6.BLOB和TEXT：BLOB主要存图片、音频等信息，而TEXT只能存储纯文本文件。

